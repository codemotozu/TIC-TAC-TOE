# name: Build,Analyze,scan
# on:
#   push:
#     branches:
#       - main
# jobs:
#   build-analyze-scan:
#     name: Build
#     runs-on: [self-hosted]  # Or use ubuntu-latest if you don't need self-hosted......
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3  # Updated to v3
#         with:
#           fetch-depth: 0
#           persist-credentials: false  # Prevents git config issues
          
#       - name: Configure Git Safe Directory
#         run: |
#           git config --global --add safe.directory "$GITHUB_WORKSPACE"
#           git config --global --add safe.directory /home/ubuntu/actions-runner/actions-runner/_work/TIC-TAC-TOE/TIC-TAC-TOE
          
#       - name: Build and analyze with SonarQube
#         uses: sonarsource/sonarqube-scan-action@master
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
#       - name: npm install dependency
#         run: npm install
        
#       - name: Trivy file scan
#         run: trivy fs . > trivyfs.txt
        
#       - name: Docker Build and push
#         run: |
#           docker build -t tic-tac-toe .
#           docker tag tic-tac-toe codemotozu/tic-tac-toe:latest
#           docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
#           docker push codemotozu/tic-tac-toe:latest
#         env:
#           DOCKER_CLI_ACI: 1
        
#       - name: Image scan
#         run: trivy image codemotozu/tic-tac-toe:latest > trivyimage.txt

#   deploy:
#    needs: build-analyze-scan
#    runs-on: [self-hosted]
#    steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           persist-credentials: false
          
#       - name: Configure Git Safe Directory
#         run: |
#           git config --global --add safe.directory "$GITHUB_WORKSPACE"
          
#       - name: docker pull image
#         run: docker pull codemotozu/tic-tac-toe:latest
        
#       - name: Image scan
#         run: trivy image codemotozu/tic-tac-toe:latest > trivyimagedeploy.txt
        
#       - name: Stop and remove existing container
#         run: |
#           docker stop game || true
#           docker rm game || true
        
#       - name: Deploy to container
#         run: docker run -d --name game -p 3000:3000 codemotozu/tic-tac-toe:latest

#       - name: Update kubeconfig
#         run: aws eks --region us-east-1 update-kubeconfig --name EKS_CLOUD

#       - name: Deploy to kubernetes
#         run: kubectl apply -f deployment-service.yml

#       - name: Send a Slack Notification
#         if: always()
#         uses: act10ns/slack@v2  # Updated to a maintained action
#         with:
#           status: ${{ job.status }}
#           webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
#           channel: '#githubactions-eks'




name: Build,Analyze,scan
on:
  push:
    branches:
      - main

env:
  DOCKER_BUILDKIT: 1
  DOCKER_IMAGE: codemotozu/tic-tac-toe:latest

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          
      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        
      # Cache npm dependencies
      - name: Cache npm dependencies
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          
      - name: Install dependencies
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit
        
      # Run SonarQube in background
      - name: Start SonarQube analysis
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        continue-on-error: true
        
      # Build Docker image with cache
      - name: Build Docker image
        run: |
          # Pull previous image for cache
          docker pull $DOCKER_IMAGE || true
          
          # Build with cache from previous image
          docker build \
            --cache-from $DOCKER_IMAGE \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t tic-tac-toe .
            
          docker tag tic-tac-toe $DOCKER_IMAGE
          
      # Login and push to Docker Hub
      - name: Push to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push $DOCKER_IMAGE
          
      # Single Trivy scan (remove duplicate)
      - name: Security scan with Trivy
        run: |
          trivy image --severity HIGH,CRITICAL --no-progress --format json -o trivy-report.json $DOCKER_IMAGE || true
          
      # Deploy directly without re-pulling
      - name: Deploy to Kubernetes
        run: |
          # Configure kubectl
          aws eks update-kubeconfig --name EKS_CLOUD --region us-east-1
          
          # Apply deployment with updated image
          kubectl set image deployment/tic-tac-toe tic-tac-toe=$DOCKER_IMAGE
          
          # Wait for rollout
          kubectl rollout status deployment/tic-tac-toe --timeout=5m
          
      # Cleanup old containers
      - name: Cleanup
        run: |
          # Stop and remove old game container if exists
          docker stop game 2>/dev/null || true
          docker rm game 2>/dev/null || true
          
          # Prune old images
          docker image prune -f
          
      - name: Send Slack Notification
        if: always()
        uses: act10ns/slack@v2
        with:
          status: ${{ job.status }}
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel: '#githubactions-eks'
