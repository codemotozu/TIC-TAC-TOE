name: Build,Analyze,scan
on:
  push:
    branches:
      - main
jobs:
  build-analyze-scan:
    name: Build
    runs-on: [self-hosted]  # Or use ubuntu-latest if you don't need self-hosted.
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Updated to v3
        with:
          fetch-depth: 0
          persist-credentials: false  # Prevents git config issues
          
      - name: Configure Git Safe Directory
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global --add safe.directory /home/ubuntu/actions-runner/actions-runner/_work/TIC-TAC-TOE/TIC-TAC-TOE
          
      - name: Build and analyze with SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      - name: npm install dependency
        run: npm install
        
      - name: Trivy file scan
        run: trivy fs . > trivyfs.txt
        
      - name: Docker Build and push
        run: |
          docker build -t tic-tac-toe .
          docker tag tic-tac-toe codemotozu/tic-tac-toe:latest
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker push codemotozu/tic-tac-toe:latest
        env:
          DOCKER_CLI_ACI: 1
        
      - name: Image scan
        run: trivy image codemotozu/tic-tac-toe:latest > trivyimage.txt

  deploy:
   needs: build-analyze-scan
   runs-on: [self-hosted]
   steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          
      - name: Configure Git Safe Directory
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          
      - name: docker pull image
        run: docker pull codemotozu/tic-tac-toe:latest
        
      - name: Image scan
        run: trivy image codemotozu/tic-tac-toe:latest > trivyimagedeploy.txt
        
      - name: Stop and remove existing container
        run: |
          docker stop game || true
          docker rm game || true
        
      - name: Deploy to container
        run: docker run -d --name game -p 3000:3000 codemotozu/tic-tac-toe:latest

      - name: Update kubeconfig
        run: aws eks --region us-east-1 update-kubeconfig --name EKS_CLOUD

      - name: Deploy to kubernetes
        run: kubectl apply -f deployment-service.yml

      - name: Send a Slack Notification
        if: always()
        uses: act10ns/slack@v2  # Updated to a maintained action
        with:
          status: ${{ job.status }}
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel: '#githubactions-eks'










# name: HUK Insurance Dashboard - Build, Analyze, Scan & Deploy

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main

# env:
#   DOCKER_IMAGE_NAME: huk-insurance-dashboard
#   DOCKER_REGISTRY: codemotozu
#   KUBERNETES_CLUSTER: EKS_CLOUD
#   AWS_REGION: us-east-1

# jobs:
#   build-analyze-scan:
#     name: Build, Analyze & Scan
#     runs-on: [self-hosted]
#     outputs:
#       image-tag: ${{ steps.meta.outputs.tags }}
#       image-digest: ${{ steps.build.outputs.digest }}
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#           persist-credentials: false

#       - name: Configure Git Safe Directory
#         run: |
#           git config --global --add safe.directory "$GITHUB_WORKSPACE"
#           git config --global --add safe.directory /home/ubuntu/actions-runner/actions-runner/_work/HUK-INSURANCE-DASHBOARD/HUK-INSURANCE-DASHBOARD

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '18'
#           cache: 'npm'

#       - name: Install dependencies
#         run: |
#           npm ci --prefer-offline --no-audit
#           npm ls

#       - name: Run tests
#         run: |
#           npm test -- --coverage --watchAll=false
          
#       - name: Run linting
#         run: |
#           npm run lint || echo "Linting completed with warnings"

#       - name: Build application
#         run: |
#           npm run build
#           ls -la build/

#       - name: SonarQube Analysis
#         uses: sonarsource/sonarqube-scan-action@master
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

#       - name: SonarQube Quality Gate Check
#         id: sonarqube-quality-gate-check
#         uses: sonarsource/sonarqube-quality-gate-action@master
#         timeout-minutes: 5
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         continue-on-error: true

#       - name: Trivy Filesystem Scan
#         run: |
#           trivy fs . \
#             --security-checks vuln,config,secret \
#             --format table \
#             --output trivy-fs-report.txt
          
#       - name: Upload Trivy Filesystem Results
#         uses: actions/upload-artifact@v4
#         with:
#           name: trivy-fs-results
#           path: trivy-fs-report.txt

#       - name: Extract Docker Metadata
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
#           tags: |
#             type=ref,event=branch
#             type=ref,event=pr
#             type=sha,prefix={{branch}}-
#             type=raw,value=latest,enable={{is_default_branch}}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build and Push Docker Image
#         id: build
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           platforms: linux/amd64,linux/arm64
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
#           build-args: |
#             BUILD_DATE=${{ github.event.head_commit.timestamp }}
#             VCS_REF=${{ github.sha }}
#             VERSION=${{ steps.meta.outputs.version }}

#       - name: Trivy Image Scan
#         run: |
#           trivy image \
#             --security-checks vuln \
#             --format table \
#             --output trivy-image-report.txt \
#             ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest

#       - name: Upload Trivy Image Results
#         uses: actions/upload-artifact@v4
#         with:
#           name: trivy-image-results
#           path: trivy-image-report.txt

#       - name: Generate SBOM
#         run: |
#           docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
#             anchore/syft:latest \
#             ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest \
#             -o spdx-json=sbom.json

#       - name: Upload SBOM
#         uses: actions/upload-artifact@v4
#         with:
#           name: sbom
#           path: sbom.json

#   security-scan:
#     name: Security & Compliance Scan
#     runs-on: [self-hosted]
#     needs: build-analyze-scan
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Run OWASP ZAP Baseline Scan
#         uses: zaproxy/action-baseline@v0.10.0
#         with:
#           target: 'http://localhost:3000'
#           docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
#           allow_issue_writing: false
#         continue-on-error: true

#       - name: Snyk Security Scan
#         uses: snyk/actions/node@master
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         with:
#           args: --severity-threshold=high
#         continue-on-error: true

#   deploy-staging:
#     name: Deploy to Staging
#     runs-on: [self-hosted]
#     needs: [build-analyze-scan, security-scan]
#     if: github.ref == 'refs/heads/develop'
#     environment: staging
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           persist-credentials: false

#       - name: Configure Git Safe Directory
#         run: |
#           git config --global --add safe.directory "$GITHUB_WORKSPACE"

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Update kubeconfig
#         run: |
#           aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.KUBERNETES_CLUSTER }}

#       - name: Deploy to Staging Kubernetes
#         run: |
#           # Update image in deployment
#           sed -i 's|image: .*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}|' deployment-service.yml
          
#           # Apply to staging namespace
#           kubectl apply -f deployment-service.yml -n staging
          
#           # Wait for rollout
#           kubectl rollout status deployment/huk-insurance-dashboard -n staging --timeout=300s

#       - name: Run Staging Health Check
#         run: |
#           # Wait for service to be ready
#           sleep 30
          
#           # Get service URL
#           SERVICE_URL=$(kubectl get svc huk-insurance-dashboard-service -n staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
#           # Health check
#           curl -f http://$SERVICE_URL/health || exit 1

#   deploy-production:
#     name: Deploy to Production
#     runs-on: [self-hosted]
#     needs: [build-analyze-scan, security-scan]
#     if: github.ref == 'refs/heads/main'
#     environment: production
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           persist-credentials: false

#       - name: Configure Git Safe Directory
#         run: |
#           git config --global --add safe.directory "$GITHUB_WORKSPACE"

#       - name: Pull and scan latest image
#         run: |
#           docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
#           trivy image \
#             --security-checks vuln \
#             --severity HIGH,CRITICAL \
#             --format table \
#             --output trivy-production-scan.txt \
#             ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest

#       - name: Stop and remove existing container
#         run: |
#           docker stop insurance-dashboard || true
#           docker rm insurance-dashboard || true

#       - name: Deploy to Production Container
#         run: |
#           docker run -d \
#             --name insurance-dashboard \
#             --restart unless-stopped \
#             -p 3000:3000 \
#             --health-cmd="curl -f http://localhost:3000/health || exit 1" \
#             --health-interval=30s \
#             --health-timeout=3s \
#             --health-retries=3 \
#             ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Update kubeconfig
#         run: |
#           aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.KUBERNETES_CLUSTER }}

#       - name: Deploy to Production Kubernetes
#         run: |
#           # Update image in deployment
#           sed -i 's|image: .*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest|' deployment-service.yml
          
#           # Apply to production namespace
#           kubectl apply -f deployment-service.yml -n production
          
#           # Wait for rollout
#           kubectl rollout status deployment/huk-insurance-dashboard -n production --timeout=600s

#       - name: Run Production Health Check
#         run: |
#           # Wait for service to be ready
#           sleep 60
          
#           # Health check for container
#           docker exec insurance-dashboard curl -f http://localhost:3000/health
          
#           # Health check for Kubernetes service
#           SERVICE_URL=$(kubectl get svc huk-insurance-dashboard-service -n production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
#           curl -f http://$SERVICE_URL/health || exit 1

#       - name: Performance Test
#         run: |
#           # Simple performance test
#           SERVICE_URL=$(kubectl get svc huk-insurance-dashboard-service -n production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
#           # Test response time
#           response_time=$(curl -o /dev/null -s -w '%{time_total}' http://$SERVICE_URL/)
#           echo "Response time: $response_time seconds"
          
#           # Fail if response time > 5 seconds
#           if (( $(echo "$response_time > 5.0" | bc -l) )); then
#             echo "Performance test failed: Response time too high"
#             exit 1
#           fi

#   notify:
#     name: Send Notifications
#     runs-on: [self-hosted]
#     needs: [deploy-production, deploy-staging]
#     if: always()
    
#     steps:
#       - name: Send Slack Notification
#         if: always()
#         uses: 8398a7/action-slack@v3
#         with:
#           status: ${{ job.status }}
#           channel: '#huk-insurance-deployments'
#           title: 'HUK Insurance Dashboard Deployment'
#           message: |
#             Repository: ${{ github.repository }}
#             Branch: ${{ github.ref_name }}
#             Commit: ${{ github.sha }}
#             Author: ${{ github.actor }}
#             Status: ${{ job.status }}
            
#             🚀 Dashboard URL: https://huk-dashboard.example.com
#             📊 Monitoring: https://grafana.example.com/huk-dashboard
#             📝 Logs: https://kibana.example.com/huk-dashboard
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

#       - name: Send Email Notification
#         if: failure()
#         uses: dawidd6/action-send-mail@v3
#         with:
#           server_address: smtp.gmail.com
#           server_port: 587
#           username: ${{ secrets.EMAIL_USERNAME }}
#           password: ${{ secrets.EMAIL_PASSWORD }}
#           subject: 'HUK Insurance Dashboard Deployment Failed'
#           body: |
#             The deployment of HUK Insurance Dashboard has failed.
            
#             Repository: ${{ github.repository }}
#             Branch: ${{ github.ref_name }}
#             Commit: ${{ github.sha }}
#             Author: ${{ github.actor }}
            
#             Please check the GitHub Actions logs for more details.
#           to: ${{ secrets.NOTIFICATION_EMAIL }}
#           from: HUK Insurance CI/CD
